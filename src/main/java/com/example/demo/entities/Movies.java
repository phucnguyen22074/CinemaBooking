package com.example.demo.entities;
// Generated 21:03:18 27 thg 12, 2024 by Hibernate Tools 4.3.6.Final

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import static jakarta.persistence.GenerationType.IDENTITY;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinTable;
import jakarta.persistence.ManyToMany;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;

/**
 * Movies generated by hbm2java
 */
@Entity
@Table(name = "movies")
public class Movies implements java.io.Serializable {

	private Integer movieId;
	private String title;
	private String description;
	private int duration;
	private Date releaseDate;
	private String imageUrl;
	private String trailerUrl;
	private Boolean status;
	private Double rating;
	private List<Actor> actors = new ArrayList<>();
	private List<MovieShowtimeScreen> movieShowtimeScreens = new ArrayList<>();
	private List<Director> directors = new ArrayList<>();
	private List<Genres> genreses = new ArrayList<>();
	private List<Theaters> theaterses = new ArrayList<>();

	public Movies() {
	}

	public Movies(String title, int duration, Date releaseDate) {
		this.title = title;
		this.duration = duration;
		this.releaseDate = releaseDate;
	}

	public Movies(String title, String description, int duration, Date releaseDate, String imageUrl, String trailerUrl,
			Boolean status, Double rating, List<Actor> actors, List<MovieShowtimeScreen> movieShowtimeScreens,
			List<Director> directors, List<Genres> genreses, List<Theaters> theaterses) {
		this.title = title;
		this.description = description;
		this.duration = duration;
		this.releaseDate = releaseDate;
		this.imageUrl = imageUrl;
		this.trailerUrl = trailerUrl;
		this.status = status;
		this.rating = rating;
		this.actors = actors;
		this.movieShowtimeScreens = movieShowtimeScreens;
		this.directors = directors;
		this.genreses = genreses;
		this.theaterses = theaterses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "movie_id", unique = true, nullable = false)
	public Integer getMovieId() {
		return this.movieId;
	}

	public void setMovieId(Integer movieId) {
		this.movieId = movieId;
	}

	@Column(name = "title", nullable = false, length = 200)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Column(name = "description", length = 65535)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "duration", nullable = false)
	public int getDuration() {
		return this.duration;
	}

	public void setDuration(int duration) {
		this.duration = duration;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "release_date", nullable = false, length = 10)
	public Date getReleaseDate() {
		return this.releaseDate;
	}

	public void setReleaseDate(Date releaseDate) {
		this.releaseDate = releaseDate;
	}

	@Column(name = "image_url")
	public String getImageUrl() {
		return this.imageUrl;
	}

	public void setImageUrl(String imageUrl) {
		this.imageUrl = imageUrl;
	}

	@Column(name = "trailer_url")
	public String getTrailerUrl() {
		return this.trailerUrl;
	}

	public void setTrailerUrl(String trailerUrl) {
		this.trailerUrl = trailerUrl;
	}

	@Column(name = "status")
	public Boolean getStatus() {
		return this.status;
	}

	public void setStatus(Boolean status) {
		this.status = status;
	}

	@Column(name = "rating", precision = 22, scale = 0)
	public Double getRating() {
		return this.rating;
	}

	public void setRating(Double rating) {
		this.rating = rating;
	}

	@ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "movie_actor", joinColumns = {
            @JoinColumn(name = "movie_id", nullable = false) }, inverseJoinColumns = {
                    @JoinColumn(name = "actor_id", nullable = false) })
    public List<Actor> getActors() {
        return this.actors;
    }

    public void setActors(List<Actor> actors) {
        this.actors = actors;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "movies")
    public List<MovieShowtimeScreen> getMovieShowtimeScreens() {
        return this.movieShowtimeScreens;
    }

    public void setMovieShowtimeScreens(List<MovieShowtimeScreen> movieShowtimeScreens) {
        this.movieShowtimeScreens = movieShowtimeScreens;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "movie_director", joinColumns = {
            @JoinColumn(name = "movie_id", nullable = false) }, inverseJoinColumns = {
                    @JoinColumn(name = "director_id", nullable = false) })
    public List<Director> getDirectors() {
        return this.directors;
    }

    public void setDirectors(List<Director> directors) {
        this.directors = directors;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "movies_genres", joinColumns = {
            @JoinColumn(name = "movie_id", nullable = false) }, inverseJoinColumns = {
                    @JoinColumn(name = "genre_id", nullable = false) })
    public List<Genres> getGenreses() {
        return this.genreses;
    }

    public void setGenreses(List<Genres> genreses) {
        this.genreses = genreses;
    }

    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(name = "movie_theater", joinColumns = {
            @JoinColumn(name = "movie_id", nullable = false) }, inverseJoinColumns = {
                    @JoinColumn(name = "theater_id", nullable = false) })
    public List<Theaters> getTheaterses() {
        return this.theaterses;
    }

    public void setTheaterses(List<Theaters> theaterses) {
        this.theaterses = theaterses;
    }

}
